README: gen_paxos/paxos_fsm

                                                                   2009.4.4 
                                                   kuenishi+paxos@gmail.com

* Motivation

  gen_paxos is a generic paxos module, easy to use in distributed system.
 paxos implementation is to be a large finite state machine. My motivation
 is to reduce the cost of re-invention of wheels.
  PAXOS is a consensus method in distributed and masterless environment,
 which is mathmatically guaranteed to make conclusion in infinite time[1].


* Current status

  A prototype of paxos consensus protocol (paxos_fsm) has successfully worked.
 GENeric PAXOS module is now under development, but 2-phase paxos consensus 
 algorithm does not work so fast as other replication/consensus protocols.

* Usage

  With setting (1)Name of Subject, (2)Idenfication Number in PAXOS group,
 (3)Value that PAXOS agent will propose, and (4)Other PAXOS agents into
 paxos_fsm:start/4, PAXOS consensus IPC (part-time parliament) starts. With
 calling paxos_fsm:get_result/1 you'll get result of the parliament. With
 calling paxos_fsm:stop/1 you'll garbage-collect the part-time parliament.

** Usage Sample
- in node A:
 nodeA> node().
 'nodeA'.
 nodeA> nodes().
 ['nodeB'].
 nodeA> gen_paxos:start_link( 0, nodes() ).
 nodeA> gen_paxos:ask( somekey, somevalue ).
 ...(paxos consensus protocol started; messages will be printed)...
 paxos mediation done. decided: hogehoge - (N=2)
 nodeA> gen_paxos:stop().
 paxos_fsm terminated (normal).
 ok
 StateName: decided
 StateData: ....
 nodeA>

- in node B:
 nodeB> node().
 'nodeB'.
 nodeB> nodes().
 ['nodeA'].
 nodeB> gen_paxos:start_link( 1, nodes() ).
 ...(paxos consensus protocol started; messages will be printed)...
 paxos mediation done. decided: hogehoge - (N=2)
 nodeB> gen_paxos:ask( somekey, void ).
 somevalue
 nodeB> 


* Future works

 - to refine the code so as to work as a generic erlang module.
 - automation of basic tests.
 - to expand coverege of tested combinations of states.
   - because paxos is complex FSM as a whole
 - to create a gen_leader compatible interface?
   - gen_leader http://www.cs.chalmers.se/~hanssv/leader_election/


* Related works

 - libpaxos ( http://sourceforge.net/projects/libpaxos )
 libpaxos is almost same implementation of PAXOS consensus protocol. it has Simple
 version and Fast version of paxos and seems well working. it's implementation
 has paxos coordinator process which can be SPOF in a really distributed
 environment, which is solved in gen_paxos.


* Appendix
 - if you find a bug or written a patch/improvement, tell me through any path.
 - Usage / Copy / Redistribution License - GPLv2.


[1] Chandra, Tushar; Robert Griesemer, Joshua Redstone (2007).
 "Paxos Made Live â€“ An Engineering Perspective". PODC '07:
 26th ACM Symposium on Principles of Distributed Computing.
 http://labs.google.com/papers/paxos_made_live.html.
